/**
 *    Store: SOrg
 *    Description: all org data
 *
 *
 *  **THIS CODE WAS GENERATED BY A TOOL**
 * **eOcean vue nuxt generator
 *
 * This is an implementation of a simple generic store to provide
 * -CRUD
 * -get all
 * -search
 *
 * for a single dto (Schema1 in this case).
 * A test data json file is used to spoof a database for now but this would be
 * easily replaced by a mongo api/db.
 */

import displayDef from "@/store/display-schemas/SOrg.json";

export const state = () => ({
  schemaDisplayDefinition: displayDef,
  all: [{"orgName":"BkTek"},{"orgName":"TRex"}], //All orgs we are tracking

});

export const getters = {
  schemaDisplayDefinition: (state) => state.schemaDisplayDefinition,
  all: (state) => state.all, //All orgs we are tracking

};

export const actions = {
  update(ctx, data) {
    const updateLevel0 = (ctx, data) => {
      //FInd data in all by id then update.
      const hits = ctx.state.all.filter((f) => f.id == data.id);
      if (!hits)
        throw `Error: found 0 hits in all data collection for id (${data.id})`;
      if (hits.length > 1)
        throw `Error: found multiple id's in all data collection for id (${data.id})`;

      //Update data in all data for hit and fire mutation
      ctx.commit("update", { dataToUpdate: hits[0], newData: data });
    };

    if (!data.parentFieldName) {
      updateLevel0(ctx, data);
    } else {
      ctx.commit("updateNestedChild", data);
    }
  },
  
};

export const mutations = {
  schemaDisplayDefinition: (state, value) =>
    (state.schemaDisplayDefinition = value),
  update(state, data) {
    data.dataToUpdate[data.newData.fieldDef.fieldName] = data.newData.newValue;
  },
  updateNestedChild(state, data) {
    const updateLevelN = (state, data) => {
      const levels = data.parentFieldName.split("/");
      let currentObject = state.all;
      let root;
      for (let n = 0; n < levels.length; n++) {
        const levelToken = levels[n];

        /**Using level token
         * -if numeric then construe as an index lookup on current object
         * -if not numeric then construe as a property name on current object
         */
        //If we're at end of list then use this final token as setter
        if (n == levels.length - 1) {
          currentObject[levelToken] = data.newValue;
        } else {
          if (!isNaN(levelToken)) {
            //Is numeric so do lookup on current object id using levelToken as id.
            const hit = currentObject.find((o) => o.id == levelToken);
            if (hit) {
              currentObject = hit;
            }
          } else {
            currentObject = currentObject[levelToken];
          }
        }
      }
    };

    updateLevelN(state, data);
  },
  add(state, text) {
    all.list.push({
      text,
      done: false,
    });
  },
  remove(state, { todo }) {
    all.list.splice(state.list.indexOf(todo), 1);
  },
  all: (state, value) => state.all=value, //All orgs we are tracking

};
