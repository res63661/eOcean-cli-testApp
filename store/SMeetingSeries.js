/**
 *    Store: SMeetingSeries
 *    Description: A meeting series contains all meeting objects for a defined 'series'
 *
 *
 *  **THIS CODE WAS GENERATED BY A TOOL**
 * **eOcean vue nuxt generator
 *
 * This is an implementation of a simple generic store to provide
 * -CRUD
 * -get all
 * -search
 *
 * for a single dto (Schema1 in this case).
 * A test data json file is used to spoof a database for now but this would be
 * easily replaced by a mongo api/db.
 */

import displayDef from "@/store/display-schemas/SMeetingSeries.json";

export const state = () => ({
  schemaDisplayDefinition: displayDef,
  selectedMeetingSeries: "eOcean Data", //Currently selected meetingSeries from all
selectedMeeting: "eOcean Data", //Currently selected meeting from the selectedMeetingSeries
all: [{"id":1,"meetingName":"System X Scrum","frequency":"every weekday","required":[{"id":3,"email":"kcarlson@rascrane.com","name":"Kurt"},{"id":4,"email":"richard@eoceandata.com","name":"Richard"}],"meetings":[{"id":1,"dateOfMeeting":"1/1/2021","actionItems":[{"who":"Kurt","what":"get Rich access","dueBy":"5/5/2021"}]}]},{"id":2,"meetingName":"Weekly","frequency":"every Tuesday","required":[{"id":1,"email":"jsmith@estringsoftware.com","name":"John Smith"},{"id":2,"email":"richard@eoceandata.com","name":"Richard Strickland"}],"meetings":[{"dateOfMeeting":"1/5/2021","actionItems":[{"who":"Rich","what":"build an app","dueBy":"3/5/2021"}]}]}], //Array of all meetingSeries objects for the org

});

export const getters = {
  schemaDisplayDefinition: (state) => state.schemaDisplayDefinition,
  selectedMeetingSeries: (state) => state.selectedMeetingSeries, //Currently selected meetingSeries from all
selectedMeeting: (state) => state.selectedMeeting, //Currently selected meeting from the selectedMeetingSeries
all: (state) => state.all, //Array of all meetingSeries objects for the org

};

export const actions = {
  update(ctx, data) {
    //FInd data in all by id then update.
    const hits = ctx.state.all.filter((f) => f.id == data.id);
    if (!hits)
      throw `Error: found 0 hits in all data collection for id (${data.id})`;
    if (hits.length > 1)
      throw `Error: found multiple id's in all data collection for id (${data.id})`;

    //Update data in all data for hit and fire mutation
    ctx.commit("update", { dataToUpdate: hits[0], newData: data });
  },
  /*moves meeting playhead fwd one meeting*/
advanceMeetingPlayhead: (ctx, value) => {}
};

export const mutations = {
  schemaDisplayDefinition: (state, value) =>
    (state.schemaDisplayDefinition = value),
  update(state, data) {
    data.dataToUpdate[data.newData.fieldDef.fieldName] = data.newData.newValue;
  },
  add(state, text) {
    all.list.push({
      text,
      done: false,
    });
  },
  remove(state, { todo }) {
    all.list.splice(state.list.indexOf(todo), 1);
  },
  selectedMeetingSeries: (state, value) => state.selectedMeetingSeries=value, //Currently selected meetingSeries from all
selectedMeeting: (state, value) => state.selectedMeeting=value, //Currently selected meeting from the selectedMeetingSeries
all: (state, value) => state.all=value, //Array of all meetingSeries objects for the org

};
